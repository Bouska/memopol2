This describes how to setup the mempol2 dev environment
=======================================================

Install the base dependencies on debian-based distributions
===========================================================

Install the base python virtualenv tools (on Ubuntu you have to enable universe):

    sudo apt-get install python-setuptools python-dev libxml2-dev libxslt1-dev libfreetype6-dev libpng12-dev python-pip libatlas-base-dev g++
    sudo pip install virtualenv
    sudo pip install virtualenvwrapper

Install the base dependencies on ArchLinux
==========================================

Install the following to have the tools on Archlinux (please note that you may have to adapt the following install procedure):

    pacman -S python2 libxml2 libxslt freetype2 python2-pip python2-virtualenv python-virtualenvwrapper libpng

Install the base dependencies on Fedora
==========================================

Install the following to have the tools on Fedora (please note that you may have to adapt the following install procedure):

    yum install python-setuptools python-devel libxml2-devel libxslt-devel freetype freetype-devel libpng libpng-devel python-pip atlas-devel g++

    pip-python install virtualenv
    pip-python install virtualenvwrapper


Setup your virtual environment
===============================

If you don't alreasy use virtualenv/virtualenvwrapper
-----------------------------------------------------

Create a directory to hold the virtual environments:

    mkdir ~/.virtualenvs

Add to your .bashrc (or equivalent) the following lines:

    export WORKON_HOME=$HOME'/.virtualenvs'
    source /usr/local/bin/virtualenvwrapper.sh

Then run the following command:

    source ~/.bashrc

This will end up creating (relatively large) folders in ~/.virtualenvs
where all the projet dependencies will be installed.

Create the virtualenv for memopol:

    mkvirtualenv --no-site-packages --distribute memopol2

Your command prompt should now begin by (memopol2)

To load this virtualenv later, you can run:

    workon memopol2

If you already use virtualenv/virtualenvwrapper
-----------------------------------------------

Create the virtualenv for memopol and workon it:

    mkvirtualenv --no-site-packages --distribute memopol2

Installation
------------

On Debian systems running Python 2.7 (like Ubuntu Natty), you must run this first:

    mkdir $VIRTUAL_ENV/local
    ln -s $VIRTUAL_ENV/lib $VIRTUAL_ENV/local/lib

(more info here: http://mail.scipy.org/pipermail/numpy-discussion/2011-June/056544.html)

Run:
    workon memopol2

Install memopol2's depdendencies:

    pip install numpy==1.5.1

Then

    pip install -r requirements.txt


Run the "migration" scripts
===========================

Run syncdb then migrate, this will import the fixtures. Warning: this take a
*LOTS* of time, arround 25min.

    cd memopol2
    ./INIT

Do *not* try to run migrate by hand or you will have a bug due to fixtures
loading and will end up with no meps fixtures.

Install the default welcome message (optional)
==============================================

   python manage.py loaddata welcome

Run the server
==============

    python manage.py runserver 8080

Your application is available on http://localhost:8080/
